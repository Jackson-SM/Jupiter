// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  firstName             String
  lastName              String
  email                 String                  @unique
  password              String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @default(now()) @updatedAt
  projectsLead          Project[]               @relation("leadId")
  workspaces            Workspace[]
  tasks                 Task[]
  comments              Comment[]
  projectsParticipating ProjectParticipanting[]
  tasksResponsibles     TasksResponsible[]
}

model Workspace {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  creator     User      @relation(fields: [creatorId], references: [id])
  creatorId   String    @db.ObjectId
  projects    Project[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

model Project {
  id           String                  @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  workspace    Workspace               @relation(fields: [workspaceId], references: [id])
  workspaceId  String                  @db.ObjectId
  lead         User                    @relation("leadId", fields: [leadId], references: [id])
  leadId       String                  @db.ObjectId
  tasks        Task[]
  participants ProjectParticipanting[]
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @default(now()) @updatedAt
}

model ProjectParticipanting {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Task {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  description      String
  project          Project            @relation(fields: [projectId], references: [id])
  projectId        String             @db.ObjectId
  responsible      User?              @relation(fields: [responsibleId], references: [id])
  responsibleId    String?            @db.ObjectId
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
  comments         Comment[]
  tasksResponsible TasksResponsible[]
}

model TasksResponsible {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Comment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  task        Task     @relation(fields: [taskId], references: [id])
  taskId      String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}
